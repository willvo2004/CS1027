Answers for Lab 3
-----------------------------------------------

EXERCISE 1

1. Looking at PrimNonPrim.java (without running it), answer these questions:

-What is the variable type of num1? Is this primitive or non-primitive?
int and primitive.
-What is the variable type of num2? Is this primitive or non-primitive?
Integer and non-primitive
-Can we invoke (call) methods on primitive variables?
No
-What is the default value of an int (i.e. a non-initialized cell in an int array)?
0
-What is the default value of an Integer (i.e. a non-initialized cell in an Integer array)?
null
-Do you think a == b is a true statement?
yes
-Do you think c == d is a true statement?
yes
-Do you think c.equals(d) is a true statement?
yes


2. What happens when you try to call a.equals(b)? Why is this happening?
The program will not compile because you cannot call methods on primative types.

3. This question refers to variables data1 and data2 in class TestDataTypes. For each one of the following statements indicate whether the comparison will return the value true or false

data1 == data2: true or false?
false
data1.intVar == data2.intVar: true or false?
true
data1.charVar == data2.charVar: true or false?
true
data1.boolVar == data2.boolVar: true or false?
true
data1.doubleVar == data2.doubleVar: true or false?
true
data1.varA == data2.varA: true or false?
false
data1.varA.numItems == data2.varA.numItems: true or false?
true
data1.varA.arrItems == data2.varA.arrItems: true or false?
false


4. How many of your answers to question 1 were incorrect? 
1 was incorrect


5. Why was the result of the last comparison true, even though arrays are non-primitive types?

It returns true because the point to the same reference because testArray is a parameter
for both data1 and data2


EXERCISE 3

6. What values were printed out for obj1.x and obj1.y, and obj2.x and obj2.y? Why do you think is happening?

10
30
20
30
since y is a static variable, every instance of ClassB will share the same value for y.

7. What do you expect counter to equal? What value is it showing? Why do you think this is happening?

I expect counter to equal N, but it is showing 1. This is happening because everytime we are
initializing a new instance of ClassC, counter is updated for each object separately.
